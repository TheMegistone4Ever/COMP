from multiprocessing import cpu_count
from typing import List, Optional

from numpy import random, array

from comp.models import (
    CenterConfig,
    CenterData,
    CenterType,
    ElementConfig,
    ElementData,
    ElementType,
)
from comp.utils import assert_positive


class DataGenerator:
    """Generates random test data for the optimization system."""

    def __init__(self,
                 num_elements: Optional[int] = None,
                 num_decision_variables: Optional[List[int]] = None,
                 num_constraints: Optional[List[int]] = None,
                 seed: int = 1810) -> None:
        """
        Initialize the DataGenerator with parameters for data creation.

        Sets up default values for the number of elements, decision variables per element,
        and constraints per element if not provided.
        It validates that these numbers are positive.
        Initializes the numpy random seed.

        :param num_elements: The total number of elements to generate data for.
        :param num_decision_variables: A list specifying the number of decision variables for each element.
        :param num_constraints: A list specifying the number of constraints for each element.
        :param seed: The seed for the random number generator to ensure reproducibility.
        """

        if num_elements is None:
            num_elements = 3
        if num_decision_variables is None:
            num_decision_variables = [6, 4, 5]
        if num_constraints is None:
            num_constraints = [4, 2, 3]

        assert_positive(num_elements, "num_elements")
        for i, (ndv, nc) in enumerate(zip(num_decision_variables, num_constraints)):
            assert_positive(ndv, f"num_decision_variables[{i}]")
            assert_positive(nc, f"num_constraints[{i}]")

        self.num_elements = num_elements
        self.num_decision_variables = num_decision_variables
        self.num_constraints = num_constraints

        random.seed(seed)

    def _generate_element_data(self, element_idx: int) -> ElementData:
        """
        Generate random data for a single element based on the generator's configuration.

        Creates an ElementData instance with randomly generated configuration (type, ID),
        functional coefficients, resource constraints, aggregated plan costs, and
        default delta/w values.
        The number of decision variables and constraints are taken from the generator's `num_decision_variables`
        and `num_constraints` lists.

        :param element_idx: The index of the element for which to generate data.
        This is used
                            to determine its ID and to look up its specific counts of variables/constraints.
        :return: A randomly generated ElementData object.
        """
        dw = 0.5
        return ElementData(
            config=ElementConfig(
                type=random.choice(list(ElementType)),
                id=element_idx,
                num_decision_variables=(n_e := self.num_decision_variables[element_idx]),
                num_constraints=(m_e := self.num_constraints[element_idx]),
            ),
            coeffs_functional=random.randint(1, 10, n_e),
            resource_constraints=(
                random.randint(5, 10, m_e) * 100,
                random.randint(0, 3, n_e),
                random.randint(10, 15, n_e) * 100,
            ),
            aggregated_plan_costs=random.randint(1, 3, (m_e, n_e)),
            delta=.5,
            w=array([i * dw for i in range(20)])
        )

    def generate_center_data(self) -> CenterData:
        """
        Generate a complete set of random data for a center and its associated elements.

        Creates a CenterData instance.
        The center's configuration (ID, parallelization settings, type, number of elements) is set,
        with some values derived from the system (cpu_count) or randomly chosen.
        Functional coefficients for the center are randomly generated.
        Element data is generated by calling `_generate_element_data` for each element.

        :return: A randomly generated CenterData object, including data for all its elements.
        """

        return CenterData(
            config=CenterConfig(
                id=0,
                min_parallelisation_threshold=cpu_count() or None,
                num_threads=cpu_count() or 1,
                type=random.choice(list(CenterType)),
                num_elements=self.num_elements
            ),
            coeffs_functional=[
                random.randint(1, 10, self.num_decision_variables[e])
                for e in range(self.num_elements)
            ],
            elements=[self._generate_element_data(e) for e in range(self.num_elements)],
        )


if __name__ == "__main__":
    """Test the DataGenerator class."""

    print(DataGenerator().generate_center_data())
